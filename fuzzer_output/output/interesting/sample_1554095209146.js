function main() {
delete (13.37)[13.37];
const v5 = [13.37,13.37,13.37,13.37,13.37];
const v7 = [1337,1337,1337,1337];
const v8 = [13.37];
const v9 = {find:v7,fill:RegExp,length:"number",acos:"number"};
const v10 = {MIN_VALUE:"number",multiline:v9};
let v11 = v7;
const v16 = [13.37,13.37,13.37,13.37,13.37];
const v18 = [1337,1337,1337,1337];
const v19 = [13.37];
const v20 = {find:v18,fill:RegExp,length:"number",acos:"number"};
const v21 = {MIN_VALUE:"number",multiline:v20};
let v22 = v18;
const v24 = ~v18;
let v25 = 1337;
const v29 = [13.37,13.37,13.37,13.37,13.37];
const v31 = [1337,1337,1337,1337];
const v32 = [13.37];
const v33 = {find:v31,fill:RegExp,length:"number",acos:"number"};
const v34 = {MIN_VALUE:"number",multiline:v33};
v29.MIN_VALUE = v31;
let v35 = v31;
const v40 = [13.37,13.37,13.37,13.37,13.37];
const v42 = [1337,1337,1337,1337];
const v43 = [13.37];
const v44 = {find:v42,fill:RegExp,length:"number",acos:"number"};
const v45 = {MIN_VALUE:v32,multiline:v44};
const v50 = [13.37,13.37,13.37,13.37,13.37];
const v52 = [1337,1337,1337,1337];
const v53 = [13.37];
const v54 = {find:v52,fill:RegExp,length:"number",acos:"number"};
const v55 = {MIN_VALUE:"number",multiline:-521713708};
const v60 = [-956001.3254401154,-956001.3254401154,-956001.3254401154,-956001.3254401154,-956001.3254401154];
const v62 = [1337,1337,1337,1337];
const v63 = [-956001.3254401154];
const v64 = {find:v62,fill:arguments,length:"number",acos:"number"};
const v65 = {MIN_VALUE:"number",multiline:v64};
const v66 = "number" + 1;
const v67 = v52 % v16;
const v68 = {trimLeft:v50};
arguments.getPrototypeOf = RegExp;
const v72 = 13.37 + 1;
}
%NeverOptimizeFunction(main);
main();
