function main() {
const v13 = [];
const v14 = {keyFor:"undefined",race:1337,trimEnd:1337,stackTraceLimit:1337,ignoreCase:v13,acosh:v13};
const v19 = [13.37,13.37];
function v20(v21,v22,v23,v24) {
}
function v25(v26,v27,v28,v29) {
    let v32 = 0;
    do {
        const v33 = v32 + 1;
        v32 = v33;
    } while (v32 < 8);
    const v38 = [13.37];
    const v40 = [1337,1337,1337,1337,1337];
    const v41 = [v40];
    const v42 = {defineProperties:Atomics,copyWithin:v41,NaN:13.37,setInt32:v40};
    const v43 = {parseInt:v38,BYTES_PER_ELEMENT:13.37};
    let v44 = 4;
    const v49 = Object.values(this,-4096);
    let v50 = 1337;
    const v52 = {hasOwnProperty:1337};
    let v55 = 0;
    const v58 = [13.37];
    let v59 = 4;
    const v63 = -Infinity;
    const v65 = Math.pow(1,v63);
    const v71 = [13.37];
    const v73 = [1337,1337,1337,1337,1337];
    const v74 = [v73];
    const v75 = {defineProperties:Atomics,copyWithin:v74,NaN:13.37,setInt32:v73};
    const v76 = {parseInt:v71,BYTES_PER_ELEMENT:13.37};
    let v77 = 4;
    const v82 = [13.37,13.37,13.37];
    const v84 = [1337,1337,1337,1337,1337];
    const v85 = [13.37,13.37,1337];
    const v86 = {trimEnd:13.37};
    const v87 = {toPrimitive:Symbol,getFloat32:Symbol,MIN_SAFE_INTEGER:13.37,assign:13.37,toLocaleString:"string",shift:13.37,expm1:v84};
    let v88 = 1337;
    const v93 = [13.37,13.37,13.37];
    const v95 = [1337,1337,1337,1337,1337];
    const v96 = {trimEnd:13.37};
    const v97 = {toPrimitive:Symbol,getFloat32:Symbol,MIN_SAFE_INTEGER:13.37,assign:13.37,toLocaleString:"string",shift:13.37,expm1:v95};
    let v98 = 1337;
    const v103 = [13.37];
    const v105 = [1337,1337,1337,1337];
    const v106 = [-32997452,-32997452];
    const v107 = {atan:-32997452};
    const v108 = {keyFor:Function,replace:-32997452,add:13.37,sinh:v103,values:v107,indexOf:v103,charCodeAt:1337};
    let v109 = v108;
    const v115 = [13.37,13.37];
    const v117 = [1337,1337];
    const v118 = [];
    const v119 = {__defineSetter__:WeakSet,E:WeakSet,keys:13.37,__lookupGetter__:v118,shift:1337,toPrimitive:WeakSet,indexOf:13.37};
    const v120 = {every:1337};
    let v121 = v115;
    const v126 = [13.37,13.37];
    const v128 = [1337,1337];
    const v129 = [];
    const v130 = {__defineSetter__:WeakSet,E:WeakSet,keys:13.37,__lookupGetter__:v129,shift:1337,toPrimitive:WeakSet,indexOf:13.37};
    const v131 = {every:1337};
    let v132 = v126;
    const v133 = v132[3812157502];
    const v135 = Symbol.search;
    const v139 = [13.37];
    const v141 = [1337,1337,1337,1337,1337];
    const v142 = [v141];
    const v143 = {defineProperties:Atomics,copyWithin:v142,NaN:13.37,setInt32:v141};
    const v144 = {parseInt:v139,BYTES_PER_ELEMENT:13.37};
    let v145 = 4;
    const v150 = [13.37];
    const v152 = [1337];
    const v153 = [127,13.37,127,"farDM+J*zM"];
    const v154 = {toFixed:v153,fromCodePoint:v152,global:v150,getUint8:Error,isNaN:"farDM+J*zM",exec:127,setFloat32:v153};
    const v155 = {LOG10E:v152,hasOwnProperty:"farDM+J*zM",leftContext:v154};
    let v156 = 1337;
    const v161 = [13.37,13.37,13.37];
    const v163 = [1337];
    const v164 = {some:v135};
    const v165 = [v161,1337,v161,65536];
    const v166 = {sinh:v165,min:65536,parseInt:"asyncIterator",lastParen:65536,reverse:BigUint64Array};
    const v167 = {lastIndexOf:v163,cosh:BigUint64Array,setUint32:1337};
    let v168 = v167;
    const v173 = [Map,13.37,13.37,13.37,13.37];
    const v175 = [1337,1337];
    const v176 = [v175,1337];
    const v177 = {};
    const v178 = {repeat:-9007199254740993,setInt8:1337,sqrt:13.37,values:v177,keyFor:1337,toPrecision:v176,isConcatSpreadable:v175,abs:v177,fill:v177};
    let v179 = Map;
    const v184 = [13.37];
    const v186 = [1337,1337,1337,1337,1337];
    const v187 = [1337,1337,v184];
    const v188 = {SQRT1_2:v184,dotAll:128,max:v186,prototype:v187,substring:128};
    const v189 = {log:13.37,bind:v184,BYTES_PER_ELEMENT:RegExp,lastParen:v184,getUint16:RegExp,SQRT1_2:v187};
    let v190 = 128;
    function v196(v197,v198,v199,v200,v201) {
    }
    const v209 = [13.37,13.37,13.37,13.37];
    const v211 = [1337,1337];
    const v212 = [13.37,2147483647];
    const v216 = new Int32Array(58176);
    function v217(v218,v219,v220,v221) {
    }
    const v278 = Symbol.iterator;
    const v279 = v217(1,Symbol);
    const v280 = {a:v209,find:v211,expm1:1337};
    const v282 = {valueOf:13.37,find:v209,hypot:Map};
    let v283 = v280;
    let v287 = 1;
    const v288 = v216 - 1;
    const v290 = [13.37,13.37,13.37,13.37];
    const v292 = [1337,1337];
    const v293 = [13.37,2147483647];
    const v294 = {parseInt:v290,find:v292,expm1:1337};
    const v295 = {valueOf:13.37,find:v290,hypot:Map};
    let v296 = v294;
    const v300 = v196 / Symbol;
    const v302 = 1337 - 1;
    const v303 = [v217,String,-0.0,-0.0];
    const v305 = v296 / "cdegaX7z6X";
    let v308 = v303;
    let v309 = -2866800045;
    const v310 = parseInt(v308,13.37,"setInt8");
    const v313 = [13.37,13.37,13.37,13.37];
    const v315 = [1337,1337,1337,1337,1337];
    const v316 = [v313,v315,"/C*n/eRFaF"];
    const v317 = {toStringTag:-2866800045,SQRT1_2:v316,fill:v316};
    const v318 = {fromEntries:-2866800045,NEGATIVE_INFINITY:v315,setFloat32:v313,isSafeInteger:"/C*n/eRFaF"};
    let v319 = v212;
    const v330 = Math.tanh(0,1679973038);
    const v331 = [1337];
    let v336 = v303;
    let v337 = undefined;
    let v342 = 0;
    let v343 = "toString";
    const v344 = v343.search(v308,0);
    const v345 = v342 + 1;
    const v347 = Symbol.species;
    const v348 = v217(v145,v175,1337,Int32Array,13.37,1337);
    const v352 = [13.37];
    let v353 = 1337;
    if (13.37) {
        const v354 = v88[2147483647];
        const v359 = [13.37];
        const v361 = [1337,1337,1337,1337,1337];
        const v362 = [v361];
        const v363 = {defineProperties:Atomics,copyWithin:v362,NaN:13.37,setInt32:v361};
        const v364 = {parseInt:v359,BYTES_PER_ELEMENT:13.37};
        let v365 = 4;
        const v370 = [13.37,13.37,13.37];
        const v372 = [1337,1337,1337,1337,1337];
        const v373 = [13.37,13.37,1337];
        const v374 = {trimEnd:13.37};
        const v375 = {toPrimitive:Symbol,getFloat32:Symbol,MIN_SAFE_INTEGER:13.37,assign:13.37,toLocaleString:"string",shift:13.37,expm1:v372};
        let v376 = 1337;
        const v381 = [13.37];
        const v383 = [1337,1337,1337,1337];
        const v384 = [-32997452,-32997452];
        const v385 = {atan:-32997452};
        const v386 = {keyFor:Function,replace:-32997452,add:13.37,sinh:v381,values:v385,indexOf:v381,charCodeAt:1337};
        let v387 = v386;
        const v392 = [13.37];
        const v394 = [1337];
        const v395 = [127,13.37,127,"farDM+J*zM"];
        const v396 = {toFixed:v395,fromCodePoint:v394,global:v392,getUint8:Error,isNaN:"farDM+J*zM",exec:127,setFloat32:v395};
        const v397 = {LOG10E:v394,hasOwnProperty:"farDM+J*zM",leftContext:v396};
        let v398 = 1337;
        const v403 = [13.37,13.37,13.37];
        const v405 = [1337];
        const v406 = [v403,1337,v403,65536];
        const v407 = {sinh:v406,min:65536,parseInt:"asyncIterator",lastParen:65536,reverse:BigUint64Array};
        const v408 = {lastIndexOf:v405,cosh:BigUint64Array,setUint32:1337};
        let v409 = v408;
        const v414 = [Map,13.37,13.37,13.37,13.37];
        const v416 = [1337,1337];
        const v417 = [v416,1337];
        const v418 = {};
        const v419 = {repeat:-9007199254740993,setInt8:1337,sqrt:13.37,values:v418,keyFor:1337,toPrecision:v417,isConcatSpreadable:v416,abs:v418,fill:v418};
        let v420 = Map;
        const v425 = [13.37];
        const v427 = [1337,1337,1337,1337,1337];
        const v428 = [1337,1337,v425];
        const v429 = {SQRT1_2:v425,dotAll:128,max:v427,prototype:v428,substring:128};
        const v430 = {log:13.37,bind:v425,BYTES_PER_ELEMENT:RegExp,lastParen:v425,getUint16:RegExp,SQRT1_2:v428};
        let v431 = 128;
        function v437(v438,v439,v440,v441,v442) {
        }
        const v450 = [13.37,13.37,13.37,13.37];
        const v452 = [1337,1337];
        const v453 = [13.37,2147483647];
        const v457 = new Int32Array(58176);
        function v458(v459,v460,v461,v462) {
            const v468 = [13.37,13.37,13.37,13.37,13.37];
            let v474 = 0;
        }
        const v550 = Symbol.iterator;
        const v551 = v458(1,Symbol);
        const v552 = {a:v450,find:v452,expm1:1337};
        const v553 = {valueOf:13.37,find:v450,hypot:Map};
        let v554 = v552;
        let v558 = 1;
        const v559 = v457 - 1;
        const v561 = [13.37,13.37,13.37,13.37];
        const v563 = [1337,1337];
        const v564 = [13.37,2147483647];
        const v565 = {a:v561,find:v563,expm1:1337};
        const v566 = {valueOf:13.37,find:v561,hypot:Map};
        let v567 = v565;
        const v571 = v437 / Symbol;
        const v573 = 1337 - 1;
        const v574 = [v458,String,-0.0,-0.0];
        let v575 = 1337;
        const v577 = v567 / "cdegaX7z6X";
        let v580 = v574;
        let v581 = -2866800045;
        const v582 = parseInt(v580,13.37,"setInt8");
        const v585 = [13.37,13.37,13.37,13.37];
        const v587 = [1337,1337,1337,1337,1337];
        const v588 = [v585,v587,"/C*n/eRFaF"];
        const v589 = {toStringTag:-2866800045,SQRT1_2:v588,fill:v588};
        const v590 = {fromEntries:-2866800045,NEGATIVE_INFINITY:v587,setFloat32:v585,isSafeInteger:"/C*n/eRFaF"};
        let v591 = v453;
        const v602 = Math.tanh(0,1679973038);
        const v603 = [1337];
        let v607 = undefined;
        function v611(v612,v613) {
        }
        function v621(v622,v623,v624,v625) {
        }
        const v632 = [1337];
        const v633 = v621(10,Function,1337,v632,Function);
        let v634 = 0;
        let v635 = "toString";
        const v636 = v635.search(v580,0);
        const v637 = v634 + 1;
    } else {
    }
    const v639 = [1337];
    const v640 = [127,13.37,127,"farDM+J*zM"];
    const v641 = {toFixed:v640,fromCodePoint:v639,global:v352,getUint8:Error,isNaN:"farDM+J*zM",exec:127,setFloat32:v640};
    const v642 = {LOG10E:v639,hasOwnProperty:"farDM+J*zM",leftContext:v641};
    let v643 = 1337;
    const v648 = [13.37,13.37,13.37];
    const v650 = [1337];
    const v651 = [v648,1337,v648,65536];
    const v652 = {sinh:v651,min:65536,parseInt:"asyncIterator",lastParen:65536,reverse:BigUint64Array};
    const v653 = {lastIndexOf:v650,cosh:BigUint64Array,setUint32:1337};
    let v654 = v653;
    const v659 = [Map,13.37,13.37,13.37,13.37];
    const v661 = [1337,1337];
    const v662 = [v661,1337];
    const v663 = {};
    const v664 = {repeat:-9007199254740993,setInt8:1337,sqrt:13.37,values:v663,keyFor:1337,toPrecision:v662,isConcatSpreadable:v661,abs:v663,fill:v663};
    let v665 = Map;
    const v670 = [13.37];
    const v672 = [1337,1337,1337,1337,1337];
    const v673 = [1337,1337,v670];
    const v674 = {SQRT1_2:v670,dotAll:128,max:v672,prototype:v673,substring:128};
    const v687 = [13.37,13.37,13.37,13.37];
    const v689 = [1337,1337];
    const v690 = [13.37,2147483647];
    const v694 = new Int32Array(58176);
    const v697 = Symbol.iterator;
    let v699 = undefined;
    function v702(v703,v704,v705,v706) {
        const v710 = [13.37,13.37,13.37,13.37,13.37];
        let v716 = 0;
        let v769 = 0;
        const v774 = Uint16Array(WeakMap);
        let v777 = 0;
        let v780 = 0;
        let v799 = 0;
    }
    const v810 = {a:v687,find:v689,expm1:1337};
    const v811 = {valueOf:13.37,find:v687,hypot:Map};
    let v812 = v810;
    let v816 = 1;
    const v817 = v694 - 1;
    const v819 = [13.37,13.37,13.37,13.37];
    const v821 = [1337,1337];
}
const v872 = {preventExtension:v25,get:v20,deleteProperty:v25,has:v25,defineProperty:v25,getOwnPropertyDescriptor:v20,call:v20,set:"undefined",ownKeys:v25,setPrototypeOf:v20,construct:v25};
const v874 = new Proxy(v19,v872);
const v875 = "undefined"[v14];
const v876 = v25(v874,v20,v25,v20,v875);
}
%NeverOptimizeFunction(main);
main();
